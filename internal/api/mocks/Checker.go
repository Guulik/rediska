// Code generated by mockery v2.50.0. DO NOT EDIT.

package mocks

import (
	bytes "bytes"

	mock "github.com/stretchr/testify/mock"
)

// Checker is an autogenerated mock type for the Checker type
type Checker struct {
	mock.Mock
}

// ECHO provides a mock function with given fields: _a0
func (_m *Checker) ECHO(_a0 string) (bytes.Buffer, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for ECHO")
	}

	var r0 bytes.Buffer
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (bytes.Buffer, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(string) bytes.Buffer); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(bytes.Buffer)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PING provides a mock function with no fields
func (_m *Checker) PING() (bytes.Buffer, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for PING")
	}

	var r0 bytes.Buffer
	var r1 error
	if rf, ok := ret.Get(0).(func() (bytes.Buffer, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() bytes.Buffer); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bytes.Buffer)
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewChecker creates a new instance of Checker. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewChecker(t interface {
	mock.TestingT
	Cleanup(func())
}) *Checker {
	mock := &Checker{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
